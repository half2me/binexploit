# Communication library for Arduino Due BinExploit
import serial
import struct

class UnoCon:
	def __init__( self ):
		self.ser = serial.Serial(port='/dev/serial/by-id/usb-Arduino_LLC_Arduino_Due-if00')
        # self.ser = serial.Serial(port='COM4') # for Windows
        # self.ser = serial.Serial(port='/dev/tty.usbmodem1a151') # for Mac
	def chksum( code ):
		eax = 0;
		for c in code:
			edx = ord(c)
			edx <<= 8
			eax ^= edx
			for x in range(0, 8):
				if eax & 0x8000:
					eax ^= 0x8380
				eax *= 2
		eax >>= 8
		return chr(eax)
	def send( type, data ):
		if(len(data) > 0xFE):
			raise ValueError("Packet can only hold 0xFE bytes of data!")
		ser.write(chr(len(data)) + data + self.chksum(data))
		return ser.read(4)
    def ping():
		return self.send("\x00")
	def data( offset, data ):
		return self.send("\x01", struct.pack('<i', offset) + data)
	def run():
		return self.send("\x02")
    def alloc( name, wtf, offset, size ):
		return self.send("\x03", name + wtf + struct.pack('<i', offset) + struct.pack('<i', size))
	def listen( n ):
		return self.ser.read(n)
	def upload( f, seek, offset, size ):
		ret = ""
		f.seek(seek)
		for i in xrange(offset, offset+size, 0x80):
			if(((offset+size)-i) >= 0x80):
				ret += self.data(i, f.read(0x80))
			else:
				ret += self.data(i, f.read((offset+size)-i))
		return ret
